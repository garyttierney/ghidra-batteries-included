name: Build distributions and container images
on:
  push:
    branches: master
  pull_request:
    branches: master
  workflow_dispatch:
jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      ghidra_ver: ${{ steps.ghidra_version.outputs.ghidra_ver }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Detect version of Ghidra
        id: ghidra_version
        shell: bash
        run: |
          while IFS='=' read -r var value; do
            normalized_var=$(sed 's/\./_/g' <<< "$var")
            declare "$normalized_var=$value"
          done < ghidra/upstream/Ghidra/application.properties

          echo "::set-output name=release_name::$application_name ${application_version}-${application_release_name} ($(date -u -I))"
          echo "::set-output name=release_tag::${application_version}_${application_release_name}_$(date -u +%s)"
          echo "::set-output name=ghidra_ver::${application_version}_${application_release_name}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ghidra_version.outputs.release_tag }}
          release_name: ${{ steps.ghidra_version.outputs.release_name }}
          body: Automated release management from GitHub Actions
        if: github.event.action != 'pull_request' && github.ref == 'refs/heads/master'

  build_distribution:
    needs: prepare_release
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 11

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle', '**/settings.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Cache Ghidra dependency repository
        uses: actions/cache@v2
        with:
          path: ghidra/upstream/flatRepo
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/fetchDependencies.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Install dependencies [${{ matrix.os }}]
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install -y winflexbison
        if: matrix.os == 'windows-latest'

      - name: Fix win_flex.exe and win_bison.exe command names
        run: |
          Rename-Item (Get-Command win_flex).Path flex.exe
          Rename-Item (Get-Command win_bison).Path bison.exe
        if: matrix.os == 'windows-latest'

      - name: Apply Ghidra patches
        working-directory: ghidra/upstream
        shell: pwsh
        run: |
          git config --global user.name "Gary Tierney"
          git config --global user.email "gary.tierney+ghidra-automation@fastmail.com"

          foreach ($uri in Get-Content ..\patches.txt) {
              if (!$uri.StartsWith('#')){
                  echo "Applying $uri"

                  Invoke-WebRequest -UseBasicParsing $uri -OutFile latest.patch
                  git am latest.patch
                  rm latest.patch
              }
          }

      - name: Set parameters
        id: params
        run: |
          echo "::set-output name=build-root-directory::ghidra/upstream"
          echo "::set-output name=gradle-version::6.8"
          echo "::set-output name=GRADLE_OPTS::-Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.daemon=false"

      - name: Download Ghidra dependency repository
        uses: eskatos/gradle-command-action@v1
        with:
          build-root-directory: ${{ steps.params.outputs.build-root-directory }}
          arguments: --init-script gradle/support/fetchDependencies.gradle init --quiet
          gradle-version: ${{ steps.params.outputs.gradle-version }}
        env:
          GRADLE_OPTS: ${{ steps.params.outputs.GRADLE_OPTS }}

      - name: Build Ghidra
        uses: eskatos/gradle-command-action@v1
        with:
          build-root-directory: ${{ steps.params.outputs.build-root-directory }}
          arguments: buildGhidra
          gradle-version: ${{ steps.params.outputs.gradle-version }}
        env:
          GRADLE_OPTS: ${{ steps.params.outputs.GRADLE_OPTS }}

      - name: Unpack archive for out of tree extension builds
        working-directory: ${{ steps.params.outputs.build-root-directory }}
        shell: pwsh
        run: Expand-Archive build/dist/*.zip exploded

      - name: Build C++ Class Analyzer
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: buildExtension
          build-root-directory: ghidra/ext-cpp-class-analyzer
          gradle-version: ${{ steps.params.outputs.gradle-version }}
        env:
          GHIDRA_INSTALL_DIR: ${{ github.workspace }}/ghidra/upstream/exploded/ghidra_${{ needs.prepare_release.outputs.ghidra_ver }}/

      - name: Move C++ Class Analyzer to distribution
        run: mv ghidra/ext-cpp-class-analyzer/dist/*.zip "${{ github.workspace }}/${{ steps.params.outputs.build-root-directory }}/exploded/ghidra_${{ needs.prepare_release.outputs.ghidra_ver }}/Extensions/Ghidra"

      - name: Repack Ghidra archive with additions
        shell: pwsh
        run: |
          Compress-Archive "${{ github.workspace }}/${{ steps.params.outputs.build-root-directory }}/exploded/ghidra_${{ needs.prepare_release.outputs.ghidra_ver }}" ghidra.zip
          mkdir public/builds
          cp ghidra.zip ghidra-${{ matrix.os }}.zip

      - name: Archive distribution
        uses: actions/upload-artifact@v2
        with:
          name: ghidra-distribution-${{ matrix.os }}
          path: ghidra.zip
          if-no-files-found: error

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ghidra.zip
          asset_name: ghidra-distribution-${{ matrix.os }}.zip
          asset_content_type: application/zip
        if: github.event.action != 'pull_request' && github.ref == 'refs/heads/master'
